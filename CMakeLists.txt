cmake_minimum_required(VERSION 3.4)

################################################################################
## General settings
################################################################################


project("ReusWorld")

set(CMAKE_CXX_FLAGS "-Wall -Wextra -pedantic")#"-ftime-report")

set(CMAKE_CXX_STANDARD 17)

set(CMAKE_CXX_FLAGS_RELEASE "-O2 -DNDEBUG")


################################################################################
## Multi-configuration installation path
################################################################################

if (${CMAKE_INSTALL_PREFIX} MATCHES "^$ENV{HOME}")
    string(TOLOWER ${CMAKE_BUILD_TYPE} BUILD_TYPE)
    string(APPEND CMAKE_INSTALL_PREFIX "/${BUILD_TYPE}")
    set(CMAKE_PREFIX_PATH ${CMAKE_INSTALL_PREFIX})
endif()
message(STATUS "Install path is ${CMAKE_INSTALL_PREFIX}/")


################################################################################
## Managing uneven support of std 17 filesystem
################################################################################


if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  link_directories(/usr/local/opt/llvm/lib/)
endif()


################################################################################
## Dependencies
################################################################################

find_package(apt REQUIRED)
include_directories(${apt_INCLUDE_DIRS})


################################################################################
## Source files (simulation)
################################################################################

FUNCTION(PREPEND output prefix)
   SET(listVar "")
   FOREACH(f ${ARGN})
      LIST(APPEND listVar "${prefix}/${f}")
   ENDFOREACH(f)
   SET(${output} "${listVar}" PARENT_SCOPE)
ENDFUNCTION(PREPEND)

set(GNTP_SRC
    "grammar.h"
    "grammar.cpp"
    "plant.h"
    "config.h"
    "plant.cpp"
    "environment.h"
    "environment.cpp"
)
PREPEND(GNTP_SRC "src/genotype" ${GNTP_SRC})

set(SIMU_SRC
    "types.h"
    "types.cpp"
    "simulation.h"
    "simulation.cpp"
    "plant.h"
    "plant.cpp"
    "organ.h"
    "organ.cpp"
    "phylogenystats.hpp"
    "environment.h"
    "environment.cpp"
    "physicstypes.hpp"
    "tiniestphysicsengine.h"
    "tiniestphysicsengine.cpp"
)
PREPEND(SIMU_SRC "src/simu" ${SIMU_SRC})

set(CGP_SRC
    "minicgp.h"
    "minicgp.cpp"
)
PREPEND(CGP_SRC "src/cgp" ${CGP_SRC})

set(S_MISC_SRC
    "config/simuconfig.h"
    "config/simuconfig.cpp"
    "config/dependencies.h"
    "config/dependencies.cpp"
    "config/dependencies_autogenerated.cpp"
)
PREPEND(S_MISC_SRC "src" ${S_MISC_SRC})

add_library(SIMU_OBJS OBJECT ${GNTP_SRC} ${SIMU_SRC} ${CGP_SRC} ${S_MISC_SRC})


################################################################################
## Target (simulation)
################################################################################
add_executable(
  simulator
  $<TARGET_OBJECTS:SIMU_OBJS>
  "src/simulator.cpp")
target_link_libraries(simulator ${apt_LIBRARIES})

add_executable(
  timelines
  $<TARGET_OBJECTS:SIMU_OBJS>
  "src/timelines.cpp")
target_link_libraries(timelines ${apt_LIBRARIES})

option(AUTO_CALIBRATION_TOOL "Whether or not to build the (slighlty) automatic calibration tool" OFF)
message("Building automatic calibration tool: " ${AUTO_CALIBRATION_TOOL})
if (AUTO_CALIBRATION_TOOL)
  add_executable(auto-calibrator
                 $<TARGET_OBJECTS:SIMU_OBJS>
                 "src/misc/autocalibrator.cpp")
  target_link_libraries(auto-calibrator ${apt_LIBRARIES})
endif()

option(ANALYZER_TOOL "Whether or not to build the analyzer tool" OFF)
message("Building analyzer tool: " ${ANALYZER_TOOL})
if (ANALYZER_TOOL)
  add_executable(analyzer $<TARGET_OBJECTS:SIMU_OBJS> "src/misc/analyzer.cpp")
  target_link_libraries(analyzer ${apt_LIBRARIES})
endif()

option(SAVE_EQUAL_ASSERTER "Whether or not to build the tool for save equality assertion" OFF)
if (SAVE_EQUAL_ASSERTER)
  add_executable(save-equal-assert
                 $<TARGET_OBJECTS:SIMU_OBJS>
                 "src/misc/saveequalasserter.cpp")
  target_link_libraries(save-equal-assert ${apt_LIBRARIES})
endif()

option(BUILD_TESTS "Whether or not to build test tools" OFF)
if (BUILD_TESTS)
  add_executable(test-cgp
                 $<TARGET_OBJECTS:SIMU_OBJS>
                 "src/cgp/minicgp_test.cpp")
  target_link_libraries(test-cgp ${apt_LIBRARIES})
endif()

if (NOT CLUSTER_BUILD)
################################################################################
## Sources files (visualizer)
################################################################################

    set(VISU_SRC
        "plant.h"
        "plant.cpp"
        "environment.h"
        "environment.cpp"
        "mainview.h"
        "mainview.cpp"
        "qtconversions.hpp"
        "graphicsimulation.h"
        "graphicsimulation.cpp"
        "controller.h"
        "controller.cpp"
        "tools/fastforwarddialog.h"
        "tools/fastforwarddialog.cpp"
        "tools/smoothdurations.hpp"
    )
    PREPEND(VISU_SRC "src/visu" ${VISU_SRC})

    add_library(VISU_OBJS OBJECT ${VISU_SRC})
    target_include_directories(VISU_OBJS PRIVATE $<TARGET_PROPERTY:Qt5::Widgets,INTERFACE_INCLUDE_DIRECTORIES>)
    target_compile_definitions(VISU_OBJS PRIVATE $<TARGET_PROPERTY:Qt5::Widgets,INTERFACE_COMPILE_DEFINITIONS>)
    set_property(TARGET VISU_OBJS PROPERTY POSITION_INDEPENDENT_CODE ON)
    set_property(TARGET VISU_OBJS PROPERTY AUTOMOC ON)


################################################################################
## Target (visualizer)
################################################################################

    add_executable(
      visualizer
      $<TARGET_OBJECTS:SIMU_OBJS>
      $<TARGET_OBJECTS:VISU_OBJS>
      "src/visualizer.cpp"
    )
    set_property(TARGET visualizer PROPERTY AUTOMOC ON)
    target_link_libraries(visualizer ${QT_LIBS} ${apt_LIBRARIES})


################################################################################
## Target (visualizer)
################################################################################

    add_executable(
      pviewer
      $<TARGET_OBJECTS:SIMU_OBJS>
      "src/phylogenyviewer.cpp"
    )
    set_property(TARGET pviewer PROPERTY AUTOMOC ON)
    target_link_libraries(pviewer ${QT_LIBS} ${apt_LIBRARIES})


################################################################################
## Targets (Test)
################################################################################
    if (BUILD_TESTS)
      add_executable(test-cgp-blindwatchmaker
                     $<TARGET_OBJECTS:SIMU_OBJS>
                     "src/cgp/minicgp_blindwatchmaker.cpp")
      set_property(TARGET test-cgp-blindwatchmaker PROPERTY AUTOMOC ON)
      target_link_libraries(test-cgp-blindwatchmaker ${QT_LIBS} ${apt_LIBRARIES})
    endif()
endif()


################################################################################
## Additional flags
################################################################################


message(STATUS "")

set(ENV_CTRL "Manual" CACHE STRING "What controls the environmental dynamics")
set_property(CACHE ENV_CTRL PROPERTY STRINGS Manual CGP)
message(STATUS "Environment is controlled by " ${ENV_CTRL})
if (${ENV_CTRL} STREQUAL "Manual")
    add_definitions(-DENV_MANUAL)
elseif (${ENV_CTRL} STREQUAL "CGP")
    add_definitions(-DENV_CGP)
else ()
    message(ERROR "Unknown controller type '${ENV_CTRL}' for environment")
endif()

option(CLUSTER_BUILD "Whether or not building on a cluster (i-e no gui and local linkage)" ON)
message(STATUS "Cluster building mode is " ${CLUSTER_BUILD})
if(CLUSTER_BUILD)
    add_definitions(-DCLUSTER_BUILD)
endif()

option(WITH_DEBUG_INFO "Sets whether to maximize debug data collection" OFF)
message(STATUS "With debug info " ${WITH_DEBUG_INFO})
if(WITH_DEBUG_INFO)
    add_definitions(-DWITH_DEBUG_INFO)

    # Enable small memory error detector (fuse=gold fixes linker errors)
#    set(ASAN "-fsanitize=thread")
    set(ASAN "-fsanitize=address -fsanitize=undefined")
    string(APPEND CMAKE_CXX_FLAGS " -g ${ASAN} -fno-omit-frame-pointer")
    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        string(APPEND CMAKE_CXX_FLAGS " -fuse-ld=gold")
    endif()
endif()

option(UPDATE_DEPENDENCIES "Whether or not to keep dependency data up-to-date (implies extra compilation time)" ON)
message(STATUS "Auto updating dependencies " ${UPDATE_DEPENDENCIES})

if (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    option(DEBUG_COLLISIONS "Add CPU/RAM cost to view collision tests" OFF)
    message("Debugging collisions: " ${DEBUG_COLLISIONS})
    if (DEBUG_COLLISIONS)
        add_definitions(-DDEBUG_COLLISIONS)
    endif()
endif()

message(STATUS "Build type is " ${CMAKE_BUILD_TYPE})
message(STATUS "Compile flags are " ${CMAKE_CXX_FLAGS})
message(STATUS "")


####################################################################################################
## Export configuration
####################################################################################################

set(DEPENDENCY_GENERATOR ${apt_DIR}/generate_dependency_data.sh)
set(DEPENDENCY_FILE "${CMAKE_CURRENT_BINARY_DIR}/reus.dependency")
set(DEPENDENCY_DATA ${PROJECT_SOURCE_DIR}/src/config/dependencies_autogenerated.cpp)
if (UPDATE_DEPENDENCIES)
    add_custom_target(dependencies ALL DEPENDS ${DEPENDENCY_FILE} ${DEPENDENCY_DATA})
    add_custom_command(
        OUTPUT ${DEPENDENCY_FILE}
        COMMAND ${DEPENDENCY_GENERATOR}
            ${DEPENDENCY_FILE} ReusWorld ${CMAKE_BUILD_TYPE}
        COMMENT "Generating dependency data"
        DEPENDS always_check
    )
    add_custom_command(
        OUTPUT ${DEPENDENCY_DATA}
        COMMAND ${PROJECT_SOURCE_DIR}/scripts/format_dependencies_data.sh
                ${DEPENDENCY_DATA} ${CMAKE_CURRENT_BINARY_DIR} ${apt_DIR}
        COMMENT "Formatting dependency data"
        DEPENDS always_check
    )
    add_custom_command(OUTPUT always_check COMMAND cmake -E echo)
endif()
